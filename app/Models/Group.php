<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Database\Eloquent\Relations\HasManyThrough;

/**
 * Group model representing a Secret Santa group.
 *
 * The IDE warning you saw (e.g. "Method Group::select() is not defined") comes from
 * static analysis not understanding Eloquent's dynamic forwarding. The @mixin tag
 * below helps tools know that all Builder methods are available statically.
 *
 * @mixin \Illuminate\Database\Eloquent\Builder
 */
class Group extends Model
{
    use HasFactory;
    use SoftDeletes;

    /**
     * Mass assignable attributes.
     *
     * @var list<string>
     */
    protected $fillable = [
        'owner_id',
        'name',
        'description',
        'min_gift_cents',
        'max_gift_cents',
        'currency',
        'draw_at',
        'join_code'
    ];

    /**
     * Attribute casting rules.
     *
     * @var array<string, string>
     */
    protected $casts = [
        'draw_at' => 'datetime',
    ];

    /**
     * Owner (group creator / administrator).
     *
     * @return BelongsTo<User, Group>
     */
    public function owner(): BelongsTo
    {
        return $this->belongsTo(User::class, 'owner_id');
    }

    /**
     * Invitations issued for this group.
     *
     * @return HasMany<GroupInvitation>
     */
    public function invitations(): HasMany
    {
        return $this->hasMany(GroupInvitation::class);
    }

    /**
     * Exclusion rules (user -> cannot gift -> excluded_user).
     *
     * @return HasMany<GroupExclusion>
     */
    public function exclusions(): HasMany
    {
        return $this->hasMany(GroupExclusion::class);
    }

    /**
     * Join requests from users wanting to participate.
     *
     * @return HasMany<GroupJoinRequest>
     */
    public function joinRequests(): HasMany
    {
        return $this->hasMany(GroupJoinRequest::class);
    }

    /**
     * Wishlist items (all users) associated to this group.
     *
     * @return HasMany<Wishlist>
     */
    public function wishlists(): HasMany
    {
        return $this->hasMany(Wishlist::class);
    }

    /**
     * Assignments generated by the draw.
     *
     * @return HasMany<Assignment>
     */
    public function assignments(): HasMany
    {
        return $this->hasMany(Assignment::class);
    }

    /**
     * All participants (owner + accepted invitations with user accounts).
     */
    public function participants()
    {
        $owner = $this->owner()->select('users.id', 'users.name', 'users.email');
        $acceptedIds = $this->invitations()
            ->whereNotNull('accepted_at')
            ->whereNotNull('invited_user_id')
            ->pluck('invited_user_id');

        return User::query()->whereIn('id', $acceptedIds->push($this->owner_id));
    }

    /**
     * Check if a user participates in this group.
     */
    public function isParticipant(User $user): bool
    {
        if ($user->id === $this->owner_id)
            return true;
        return $this->invitations()
            ->whereNotNull('accepted_at')
            ->where('invited_user_id', $user->id)
            ->exists();
    }
}
